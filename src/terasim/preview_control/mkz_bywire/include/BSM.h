// Generated by gencpp from file mcity_msg/BSM.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_BSM_H
#define MCITY_MSG_MESSAGE_BSM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcity_msg
{
template <class ContainerAllocator>
struct BSM_
{
  typedef BSM_<ContainerAllocator> Type;

  BSM_()
    : timestamp(0.0)
    , id(0)
    , type(0)
    , size_x(0.0)
    , size_y(0.0)
    , size_z(0.0)
    , heading(0.0)
    , speed_x(0.0)
    , speed_y(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , longitude(0.0)
    , latitude(0.0)  {
    }
  BSM_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , id(0)
    , type(0)
    , size_x(0.0)
    , size_y(0.0)
    , size_z(0.0)
    , heading(0.0)
    , speed_x(0.0)
    , speed_y(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , longitude(0.0)
    , latitude(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _id_type;
  _id_type id;

   typedef int16_t _type_type;
  _type_type type;

   typedef double _size_x_type;
  _size_x_type size_x;

   typedef double _size_y_type;
  _size_y_type size_y;

   typedef double _size_z_type;
  _size_z_type size_z;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _speed_x_type;
  _speed_x_type speed_x;

   typedef double _speed_y_type;
  _speed_y_type speed_y;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _latitude_type;
  _latitude_type latitude;





  typedef boost::shared_ptr< ::mcity_msg::BSM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::BSM_<ContainerAllocator> const> ConstPtr;

}; // struct BSM_

typedef ::mcity_msg::BSM_<std::allocator<void> > BSM;

typedef boost::shared_ptr< ::mcity_msg::BSM > BSMPtr;
typedef boost::shared_ptr< ::mcity_msg::BSM const> BSMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::BSM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::BSM_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::BSM_<ContainerAllocator1> & lhs, const ::mcity_msg::BSM_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.size_x == rhs.size_x &&
    lhs.size_y == rhs.size_y &&
    lhs.size_z == rhs.size_z &&
    lhs.heading == rhs.heading &&
    lhs.speed_x == rhs.speed_x &&
    lhs.speed_y == rhs.speed_y &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::BSM_<ContainerAllocator1> & lhs, const ::mcity_msg::BSM_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::BSM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::BSM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::BSM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::BSM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::BSM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::BSM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::BSM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "855a516b8ea88db2332bb47f8c9a9cae";
  }

  static const char* value(const ::mcity_msg::BSM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x855a516b8ea88db2ULL;
  static const uint64_t static_value2 = 0x332bb47f8c9a9caeULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::BSM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/BSM";
  }

  static const char* value(const ::mcity_msg::BSM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::BSM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 	timestamp\n"
"int32 		id \n"
"int16 		type\n"
"float64 	size_x\n"
"float64 	size_y\n"
"float64 	size_z\n"
"\n"
"float64 	heading\n"
"float64 	speed_x\n"
"float64 	speed_y\n"
"\n"
"float64 	x \n"
"float64 	y\n"
"float64 	z\n"
"\n"
"float64 	longitude\n"
"float64 	latitude\n"
;
  }

  static const char* value(const ::mcity_msg::BSM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::BSM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.size_x);
      stream.next(m.size_y);
      stream.next(m.size_z);
      stream.next(m.heading);
      stream.next(m.speed_x);
      stream.next(m.speed_y);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.longitude);
      stream.next(m.latitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BSM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::BSM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::BSM_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int16_t>::stream(s, indent + "  ", v.type);
    s << indent << "size_x: ";
    Printer<double>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<double>::stream(s, indent + "  ", v.size_y);
    s << indent << "size_z: ";
    Printer<double>::stream(s, indent + "  ", v.size_z);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "speed_x: ";
    Printer<double>::stream(s, indent + "  ", v.speed_x);
    s << indent << "speed_y: ";
    Printer<double>::stream(s, indent + "  ", v.speed_y);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_BSM_H
