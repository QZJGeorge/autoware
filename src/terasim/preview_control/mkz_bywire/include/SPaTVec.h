// Generated by gencpp from file mcity_msg/SPaTVec.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_SPATVEC_H
#define MCITY_MSG_MESSAGE_SPATVEC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mcity_msg/SPaT.h>

namespace mcity_msg
{
template <class ContainerAllocator>
struct SPaTVec_
{
  typedef SPaTVec_<ContainerAllocator> Type;

  SPaTVec_()
    : timestamp(0.0)
    , sensor_id(0)
    , len(0)
    , spatVec()  {
    }
  SPaTVec_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , sensor_id(0)
    , len(0)
    , spatVec(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef int32_t _len_type;
  _len_type len;

   typedef std::vector< ::mcity_msg::SPaT_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mcity_msg::SPaT_<ContainerAllocator> >::other >  _spatVec_type;
  _spatVec_type spatVec;





  typedef boost::shared_ptr< ::mcity_msg::SPaTVec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::SPaTVec_<ContainerAllocator> const> ConstPtr;

}; // struct SPaTVec_

typedef ::mcity_msg::SPaTVec_<std::allocator<void> > SPaTVec;

typedef boost::shared_ptr< ::mcity_msg::SPaTVec > SPaTVecPtr;
typedef boost::shared_ptr< ::mcity_msg::SPaTVec const> SPaTVecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::SPaTVec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::SPaTVec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::SPaTVec_<ContainerAllocator1> & lhs, const ::mcity_msg::SPaTVec_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.len == rhs.len &&
    lhs.spatVec == rhs.spatVec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::SPaTVec_<ContainerAllocator1> & lhs, const ::mcity_msg::SPaTVec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::SPaTVec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::SPaTVec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::SPaTVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::SPaTVec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::SPaTVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::SPaTVec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::SPaTVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc6fb3447d80bcf52d898d90017e08cd";
  }

  static const char* value(const ::mcity_msg::SPaTVec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc6fb3447d80bcf5ULL;
  static const uint64_t static_value2 = 0x2d898d90017e08cdULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::SPaTVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/SPaTVec";
  }

  static const char* value(const ::mcity_msg::SPaTVec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::SPaTVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 	timestamp\n"
"int32 		sensor_id\n"
"int32   	len\n"
"SPaT[]  	spatVec\n"
"\n"
"================================================================================\n"
"MSG: mcity_msg/SPaT\n"
"\n"
"float64 	timestamp\n"
"int32 		id \n"
"int16[8] 	state\n"
"float32[8] 	remain_time\n"
"\n"
"#define state\n"
"#RED 		1\n"
"#GREEN		3\n"
"#YELLOW  	4\n"
;
  }

  static const char* value(const ::mcity_msg::SPaTVec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::SPaTVec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.sensor_id);
      stream.next(m.len);
      stream.next(m.spatVec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SPaTVec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::SPaTVec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::SPaTVec_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "sensor_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "len: ";
    Printer<int32_t>::stream(s, indent + "  ", v.len);
    s << indent << "spatVec[]" << std::endl;
    for (size_t i = 0; i < v.spatVec.size(); ++i)
    {
      s << indent << "  spatVec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mcity_msg::SPaT_<ContainerAllocator> >::stream(s, indent + "    ", v.spatVec[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_SPATVEC_H
