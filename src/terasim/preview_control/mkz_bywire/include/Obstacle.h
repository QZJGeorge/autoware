// Generated by gencpp from file mcity_msg/Obstacle.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_OBSTACLE_H
#define MCITY_MSG_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mcity_msg/OnePath.h>

namespace mcity_msg
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : timestamp(0.0)
    , id(0)
    , type(0)
    , size_x(0.0)
    , size_y(0.0)
    , size_z(0.0)
    , x_global(0.0)
    , y_global(0.0)
    , h_global(0.0)
    , x_local(0.0)
    , y_local(0.0)
    , pathVec()  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , id(0)
    , type(0)
    , size_x(0.0)
    , size_y(0.0)
    , size_z(0.0)
    , x_global(0.0)
    , y_global(0.0)
    , h_global(0.0)
    , x_local(0.0)
    , y_local(0.0)
    , pathVec(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _id_type;
  _id_type id;

   typedef int16_t _type_type;
  _type_type type;

   typedef double _size_x_type;
  _size_x_type size_x;

   typedef double _size_y_type;
  _size_y_type size_y;

   typedef double _size_z_type;
  _size_z_type size_z;

   typedef double _x_global_type;
  _x_global_type x_global;

   typedef double _y_global_type;
  _y_global_type y_global;

   typedef double _h_global_type;
  _h_global_type h_global;

   typedef double _x_local_type;
  _x_local_type x_local;

   typedef double _y_local_type;
  _y_local_type y_local;

   typedef std::vector< ::mcity_msg::OnePath_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mcity_msg::OnePath_<ContainerAllocator> >::other >  _pathVec_type;
  _pathVec_type pathVec;





  typedef boost::shared_ptr< ::mcity_msg::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::mcity_msg::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::mcity_msg::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::mcity_msg::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::Obstacle_<ContainerAllocator1> & lhs, const ::mcity_msg::Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.size_x == rhs.size_x &&
    lhs.size_y == rhs.size_y &&
    lhs.size_z == rhs.size_z &&
    lhs.x_global == rhs.x_global &&
    lhs.y_global == rhs.y_global &&
    lhs.h_global == rhs.h_global &&
    lhs.x_local == rhs.x_local &&
    lhs.y_local == rhs.y_local &&
    lhs.pathVec == rhs.pathVec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::Obstacle_<ContainerAllocator1> & lhs, const ::mcity_msg::Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c18bb74e2f04acb442873a6fcb96cc1";
  }

  static const char* value(const ::mcity_msg::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c18bb74e2f04acbULL;
  static const uint64_t static_value2 = 0x442873a6fcb96cc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/Obstacle";
  }

  static const char* value(const ::mcity_msg::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 	timestamp\n"
"int32 		id \n"
"int16 		type\n"
"float64 	size_x\n"
"float64 	size_y\n"
"float64 	size_z\n"
"\n"
"float64 	x_global\n"
"float64 	y_global\n"
"float64 	h_global\n"
"\n"
"float64 	x_local\n"
"float64 	y_local\n"
"\n"
"#future path\n"
"OnePath[] pathVec\n"
"================================================================================\n"
"MSG: mcity_msg/OnePath\n"
"Point[] data\n"
"================================================================================\n"
"MSG: mcity_msg/Point\n"
"float64 t\n"
"float64 x\n"
"float64 y\n"
"float64 v\n"
"float64 heading\n"
"float64 cr\n"
;
  }

  static const char* value(const ::mcity_msg::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.size_x);
      stream.next(m.size_y);
      stream.next(m.size_z);
      stream.next(m.x_global);
      stream.next(m.y_global);
      stream.next(m.h_global);
      stream.next(m.x_local);
      stream.next(m.y_local);
      stream.next(m.pathVec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<int16_t>::stream(s, indent + "  ", v.type);
    s << indent << "size_x: ";
    Printer<double>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<double>::stream(s, indent + "  ", v.size_y);
    s << indent << "size_z: ";
    Printer<double>::stream(s, indent + "  ", v.size_z);
    s << indent << "x_global: ";
    Printer<double>::stream(s, indent + "  ", v.x_global);
    s << indent << "y_global: ";
    Printer<double>::stream(s, indent + "  ", v.y_global);
    s << indent << "h_global: ";
    Printer<double>::stream(s, indent + "  ", v.h_global);
    s << indent << "x_local: ";
    Printer<double>::stream(s, indent + "  ", v.x_local);
    s << indent << "y_local: ";
    Printer<double>::stream(s, indent + "  ", v.y_local);
    s << indent << "pathVec[]" << std::endl;
    for (size_t i = 0; i < v.pathVec.size(); ++i)
    {
      s << indent << "  pathVec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mcity_msg::OnePath_<ContainerAllocator> >::stream(s, indent + "    ", v.pathVec[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_OBSTACLE_H
