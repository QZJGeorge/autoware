// Generated by gencpp from file mcity_msg/Point.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_POINT_H
#define MCITY_MSG_MESSAGE_POINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcity_msg
{
template <class ContainerAllocator>
struct Point_
{
  typedef Point_<ContainerAllocator> Type;

  Point_()
    : t(0.0)
    , x(0.0)
    , y(0.0)
    , v(0.0)
    , heading(0.0)
    , cr(0.0)  {
    }
  Point_(const ContainerAllocator& _alloc)
    : t(0.0)
    , x(0.0)
    , y(0.0)
    , v(0.0)
    , heading(0.0)
    , cr(0.0)  {
  (void)_alloc;
    }



   typedef double _t_type;
  _t_type t;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _v_type;
  _v_type v;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _cr_type;
  _cr_type cr;





  typedef boost::shared_ptr< ::mcity_msg::Point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::Point_<ContainerAllocator> const> ConstPtr;

}; // struct Point_

typedef ::mcity_msg::Point_<std::allocator<void> > Point;

typedef boost::shared_ptr< ::mcity_msg::Point > PointPtr;
typedef boost::shared_ptr< ::mcity_msg::Point const> PointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::Point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::Point_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::Point_<ContainerAllocator1> & lhs, const ::mcity_msg::Point_<ContainerAllocator2> & rhs)
{
  return lhs.t == rhs.t &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.v == rhs.v &&
    lhs.heading == rhs.heading &&
    lhs.cr == rhs.cr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::Point_<ContainerAllocator1> & lhs, const ::mcity_msg::Point_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::Point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::Point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::Point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::Point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::Point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::Point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f9a468bcb79a1dd903443b966005c5d";
  }

  static const char* value(const ::mcity_msg::Point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f9a468bcb79a1ddULL;
  static const uint64_t static_value2 = 0x903443b966005c5dULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/Point";
  }

  static const char* value(const ::mcity_msg::Point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::Point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 t\n"
"float64 x\n"
"float64 y\n"
"float64 v\n"
"float64 heading\n"
"float64 cr\n"
;
  }

  static const char* value(const ::mcity_msg::Point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::Point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.v);
      stream.next(m.heading);
      stream.next(m.cr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::Point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::Point_<ContainerAllocator>& v)
  {
    s << indent << "t: ";
    Printer<double>::stream(s, indent + "  ", v.t);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "cr: ";
    Printer<double>::stream(s, indent + "  ", v.cr);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_POINT_H
