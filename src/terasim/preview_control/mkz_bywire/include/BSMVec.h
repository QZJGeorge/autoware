// Generated by gencpp from file mcity_msg/BSMVec.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_BSMVEC_H
#define MCITY_MSG_MESSAGE_BSMVEC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mcity_msg/BSM.h>

namespace mcity_msg
{
template <class ContainerAllocator>
struct BSMVec_
{
  typedef BSMVec_<ContainerAllocator> Type;

  BSMVec_()
    : timestamp(0.0)
    , sensor_id(0)
    , len(0)
    , bsmVec()  {
    }
  BSMVec_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , sensor_id(0)
    , len(0)
    , bsmVec(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _sensor_id_type;
  _sensor_id_type sensor_id;

   typedef int32_t _len_type;
  _len_type len;

   typedef std::vector< ::mcity_msg::BSM_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mcity_msg::BSM_<ContainerAllocator> >::other >  _bsmVec_type;
  _bsmVec_type bsmVec;





  typedef boost::shared_ptr< ::mcity_msg::BSMVec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::BSMVec_<ContainerAllocator> const> ConstPtr;

}; // struct BSMVec_

typedef ::mcity_msg::BSMVec_<std::allocator<void> > BSMVec;

typedef boost::shared_ptr< ::mcity_msg::BSMVec > BSMVecPtr;
typedef boost::shared_ptr< ::mcity_msg::BSMVec const> BSMVecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::BSMVec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::BSMVec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::BSMVec_<ContainerAllocator1> & lhs, const ::mcity_msg::BSMVec_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.sensor_id == rhs.sensor_id &&
    lhs.len == rhs.len &&
    lhs.bsmVec == rhs.bsmVec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::BSMVec_<ContainerAllocator1> & lhs, const ::mcity_msg::BSMVec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::BSMVec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::BSMVec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::BSMVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::BSMVec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::BSMVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::BSMVec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::BSMVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee69f90a4a328974670815a02e38b3ac";
  }

  static const char* value(const ::mcity_msg::BSMVec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee69f90a4a328974ULL;
  static const uint64_t static_value2 = 0x670815a02e38b3acULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::BSMVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/BSMVec";
  }

  static const char* value(const ::mcity_msg::BSMVec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::BSMVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 	timestamp\n"
"int32 		sensor_id\n"
"int32   	len\n"
"BSM[]   	bsmVec\n"
"================================================================================\n"
"MSG: mcity_msg/BSM\n"
"\n"
"float64 	timestamp\n"
"int32 		id \n"
"int16 		type\n"
"float64 	size_x\n"
"float64 	size_y\n"
"float64 	size_z\n"
"\n"
"float64 	heading\n"
"float64 	speed_x\n"
"float64 	speed_y\n"
"\n"
"float64 	x \n"
"float64 	y\n"
"float64 	z\n"
"\n"
"float64 	longitude\n"
"float64 	latitude\n"
;
  }

  static const char* value(const ::mcity_msg::BSMVec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::BSMVec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.sensor_id);
      stream.next(m.len);
      stream.next(m.bsmVec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BSMVec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::BSMVec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::BSMVec_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "sensor_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "len: ";
    Printer<int32_t>::stream(s, indent + "  ", v.len);
    s << indent << "bsmVec[]" << std::endl;
    for (size_t i = 0; i < v.bsmVec.size(); ++i)
    {
      s << indent << "  bsmVec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mcity_msg::BSM_<ContainerAllocator> >::stream(s, indent + "    ", v.bsmVec[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_BSMVEC_H
