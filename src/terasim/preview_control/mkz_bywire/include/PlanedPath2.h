// Generated by gencpp from file mcity_msg/PlanedPath2.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_PLANEDPATH2_H
#define MCITY_MSG_MESSAGE_PLANEDPATH2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcity_msg
{
template <class ContainerAllocator>
struct PlanedPath2_
{
  typedef PlanedPath2_<ContainerAllocator> Type;

  PlanedPath2_()
    : timestamp(0.0)
    , Estop(0)
    , Go(false)
    , Signal(0)
    , vd(0.0)
    , acc_d(0.0)
    , acc_dd(0.0)
    , slope(0.0)
    , vmax(0.0)
    , ey(0.0)
    , ephi(0.0)
    , len(0.0)
    , cr(0.0)
    , crVector()
    , vdVector()
    , slopeVector()
    , xVector()
    , yVector()
    , x(0.0)
    , y(0.0)  {
    }
  PlanedPath2_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , Estop(0)
    , Go(false)
    , Signal(0)
    , vd(0.0)
    , acc_d(0.0)
    , acc_dd(0.0)
    , slope(0.0)
    , vmax(0.0)
    , ey(0.0)
    , ephi(0.0)
    , len(0.0)
    , cr(0.0)
    , crVector(_alloc)
    , vdVector(_alloc)
    , slopeVector(_alloc)
    , xVector(_alloc)
    , yVector(_alloc)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int16_t _Estop_type;
  _Estop_type Estop;

   typedef uint8_t _Go_type;
  _Go_type Go;

   typedef int16_t _Signal_type;
  _Signal_type Signal;

   typedef double _vd_type;
  _vd_type vd;

   typedef double _acc_d_type;
  _acc_d_type acc_d;

   typedef double _acc_dd_type;
  _acc_dd_type acc_dd;

   typedef double _slope_type;
  _slope_type slope;

   typedef double _vmax_type;
  _vmax_type vmax;

   typedef double _ey_type;
  _ey_type ey;

   typedef double _ephi_type;
  _ephi_type ephi;

   typedef double _len_type;
  _len_type len;

   typedef double _cr_type;
  _cr_type cr;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _crVector_type;
  _crVector_type crVector;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _vdVector_type;
  _vdVector_type vdVector;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _slopeVector_type;
  _slopeVector_type slopeVector;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _xVector_type;
  _xVector_type xVector;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _yVector_type;
  _yVector_type yVector;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::mcity_msg::PlanedPath2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::PlanedPath2_<ContainerAllocator> const> ConstPtr;

}; // struct PlanedPath2_

typedef ::mcity_msg::PlanedPath2_<std::allocator<void> > PlanedPath2;

typedef boost::shared_ptr< ::mcity_msg::PlanedPath2 > PlanedPath2Ptr;
typedef boost::shared_ptr< ::mcity_msg::PlanedPath2 const> PlanedPath2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::PlanedPath2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::PlanedPath2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::PlanedPath2_<ContainerAllocator1> & lhs, const ::mcity_msg::PlanedPath2_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.Estop == rhs.Estop &&
    lhs.Go == rhs.Go &&
    lhs.Signal == rhs.Signal &&
    lhs.vd == rhs.vd &&
    lhs.acc_d == rhs.acc_d &&
    lhs.acc_dd == rhs.acc_dd &&
    lhs.slope == rhs.slope &&
    lhs.vmax == rhs.vmax &&
    lhs.ey == rhs.ey &&
    lhs.ephi == rhs.ephi &&
    lhs.len == rhs.len &&
    lhs.cr == rhs.cr &&
    lhs.crVector == rhs.crVector &&
    lhs.vdVector == rhs.vdVector &&
    lhs.slopeVector == rhs.slopeVector &&
    lhs.xVector == rhs.xVector &&
    lhs.yVector == rhs.yVector &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::PlanedPath2_<ContainerAllocator1> & lhs, const ::mcity_msg::PlanedPath2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::PlanedPath2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::PlanedPath2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::PlanedPath2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::PlanedPath2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::PlanedPath2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::PlanedPath2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::PlanedPath2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93ce800c77cef09d1c2e6ffa77129aeb";
  }

  static const char* value(const ::mcity_msg::PlanedPath2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93ce800c77cef09dULL;
  static const uint64_t static_value2 = 0x1c2e6ffa77129aebULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::PlanedPath2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/PlanedPath2";
  }

  static const char* value(const ::mcity_msg::PlanedPath2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::PlanedPath2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 timestamp\n"
"int16 	Estop\n"
"bool 	Go\n"
"int16 	Signal\n"
"\n"
"float64 vd\n"
"float64 acc_d\n"
"float64 acc_dd\n"
"float64 slope\n"
"float64 vmax\n"
"float64 ey\n"
"float64 ephi\n"
"float64 len\n"
"float64 cr\n"
"float64[] crVector\n"
"float64[] vdVector\n"
"float64[] slopeVector\n"
"\n"
"#for pure pursuit control\n"
"float64[] xVector\n"
"float64[] yVector\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::mcity_msg::PlanedPath2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::PlanedPath2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.Estop);
      stream.next(m.Go);
      stream.next(m.Signal);
      stream.next(m.vd);
      stream.next(m.acc_d);
      stream.next(m.acc_dd);
      stream.next(m.slope);
      stream.next(m.vmax);
      stream.next(m.ey);
      stream.next(m.ephi);
      stream.next(m.len);
      stream.next(m.cr);
      stream.next(m.crVector);
      stream.next(m.vdVector);
      stream.next(m.slopeVector);
      stream.next(m.xVector);
      stream.next(m.yVector);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanedPath2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::PlanedPath2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::PlanedPath2_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "Estop: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Estop);
    s << indent << "Go: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Go);
    s << indent << "Signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Signal);
    s << indent << "vd: ";
    Printer<double>::stream(s, indent + "  ", v.vd);
    s << indent << "acc_d: ";
    Printer<double>::stream(s, indent + "  ", v.acc_d);
    s << indent << "acc_dd: ";
    Printer<double>::stream(s, indent + "  ", v.acc_dd);
    s << indent << "slope: ";
    Printer<double>::stream(s, indent + "  ", v.slope);
    s << indent << "vmax: ";
    Printer<double>::stream(s, indent + "  ", v.vmax);
    s << indent << "ey: ";
    Printer<double>::stream(s, indent + "  ", v.ey);
    s << indent << "ephi: ";
    Printer<double>::stream(s, indent + "  ", v.ephi);
    s << indent << "len: ";
    Printer<double>::stream(s, indent + "  ", v.len);
    s << indent << "cr: ";
    Printer<double>::stream(s, indent + "  ", v.cr);
    s << indent << "crVector[]" << std::endl;
    for (size_t i = 0; i < v.crVector.size(); ++i)
    {
      s << indent << "  crVector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.crVector[i]);
    }
    s << indent << "vdVector[]" << std::endl;
    for (size_t i = 0; i < v.vdVector.size(); ++i)
    {
      s << indent << "  vdVector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vdVector[i]);
    }
    s << indent << "slopeVector[]" << std::endl;
    for (size_t i = 0; i < v.slopeVector.size(); ++i)
    {
      s << indent << "  slopeVector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.slopeVector[i]);
    }
    s << indent << "xVector[]" << std::endl;
    for (size_t i = 0; i < v.xVector.size(); ++i)
    {
      s << indent << "  xVector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.xVector[i]);
    }
    s << indent << "yVector[]" << std::endl;
    for (size_t i = 0; i < v.yVector.size(); ++i)
    {
      s << indent << "  yVector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yVector[i]);
    }
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_PLANEDPATH2_H
