// Generated by gencpp from file mcity_msg/RefPath.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_REFPATH_H
#define MCITY_MSG_MESSAGE_REFPATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcity_msg
{
template <class ContainerAllocator>
struct RefPath_
{
  typedef RefPath_<ContainerAllocator> Type;

  RefPath_()
    : x(0.0)
    , y(0.0)
    , heading(0.0)
    , cr(0.0)
    , distance(0.0)
    , left_width(0.0)
    , right_width(0.0)  {
    }
  RefPath_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , heading(0.0)
    , cr(0.0)
    , distance(0.0)
    , left_width(0.0)
    , right_width(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _cr_type;
  _cr_type cr;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _left_width_type;
  _left_width_type left_width;

   typedef double _right_width_type;
  _right_width_type right_width;





  typedef boost::shared_ptr< ::mcity_msg::RefPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::RefPath_<ContainerAllocator> const> ConstPtr;

}; // struct RefPath_

typedef ::mcity_msg::RefPath_<std::allocator<void> > RefPath;

typedef boost::shared_ptr< ::mcity_msg::RefPath > RefPathPtr;
typedef boost::shared_ptr< ::mcity_msg::RefPath const> RefPathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::RefPath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::RefPath_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::RefPath_<ContainerAllocator1> & lhs, const ::mcity_msg::RefPath_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.heading == rhs.heading &&
    lhs.cr == rhs.cr &&
    lhs.distance == rhs.distance &&
    lhs.left_width == rhs.left_width &&
    lhs.right_width == rhs.right_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::RefPath_<ContainerAllocator1> & lhs, const ::mcity_msg::RefPath_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::RefPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::RefPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::RefPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::RefPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::RefPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::RefPath_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::RefPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5ea9d5713f76c4caa45b464b9a0cf83";
  }

  static const char* value(const ::mcity_msg::RefPath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5ea9d5713f76c4cULL;
  static const uint64_t static_value2 = 0xaa45b464b9a0cf83ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::RefPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/RefPath";
  }

  static const char* value(const ::mcity_msg::RefPath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::RefPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#reference path\n"
"float64 	x\n"
"float64 	y\n"
"float64 	heading\n"
"float64 	cr\n"
"float64 	distance\n"
"\n"
"#drivable area\n"
"float64 	left_width\n"
"float64 	right_width\n"
;
  }

  static const char* value(const ::mcity_msg::RefPath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::RefPath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.heading);
      stream.next(m.cr);
      stream.next(m.distance);
      stream.next(m.left_width);
      stream.next(m.right_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RefPath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::RefPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::RefPath_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "cr: ";
    Printer<double>::stream(s, indent + "  ", v.cr);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "left_width: ";
    Printer<double>::stream(s, indent + "  ", v.left_width);
    s << indent << "right_width: ";
    Printer<double>::stream(s, indent + "  ", v.right_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_REFPATH_H
