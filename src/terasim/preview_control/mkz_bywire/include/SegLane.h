// Generated by gencpp from file mcity_msg/SegLane.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_SEGLANE_H
#define MCITY_MSG_MESSAGE_SEGLANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcity_msg
{
template <class ContainerAllocator>
struct SegLane_
{
  typedef SegLane_<ContainerAllocator> Type;

  SegLane_()
    : Seg_previous(0)
    , Lane_previous(0)
    , Seg_current(0)
    , Lane_current(0)
    , Seg_next(0)
    , Lane_next(0)
    , requestTrafficLight(0)  {
    }
  SegLane_(const ContainerAllocator& _alloc)
    : Seg_previous(0)
    , Lane_previous(0)
    , Seg_current(0)
    , Lane_current(0)
    , Seg_next(0)
    , Lane_next(0)
    , requestTrafficLight(0)  {
  (void)_alloc;
    }



   typedef int16_t _Seg_previous_type;
  _Seg_previous_type Seg_previous;

   typedef int16_t _Lane_previous_type;
  _Lane_previous_type Lane_previous;

   typedef int16_t _Seg_current_type;
  _Seg_current_type Seg_current;

   typedef int16_t _Lane_current_type;
  _Lane_current_type Lane_current;

   typedef int16_t _Seg_next_type;
  _Seg_next_type Seg_next;

   typedef int16_t _Lane_next_type;
  _Lane_next_type Lane_next;

   typedef int16_t _requestTrafficLight_type;
  _requestTrafficLight_type requestTrafficLight;





  typedef boost::shared_ptr< ::mcity_msg::SegLane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::SegLane_<ContainerAllocator> const> ConstPtr;

}; // struct SegLane_

typedef ::mcity_msg::SegLane_<std::allocator<void> > SegLane;

typedef boost::shared_ptr< ::mcity_msg::SegLane > SegLanePtr;
typedef boost::shared_ptr< ::mcity_msg::SegLane const> SegLaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::SegLane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::SegLane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::SegLane_<ContainerAllocator1> & lhs, const ::mcity_msg::SegLane_<ContainerAllocator2> & rhs)
{
  return lhs.Seg_previous == rhs.Seg_previous &&
    lhs.Lane_previous == rhs.Lane_previous &&
    lhs.Seg_current == rhs.Seg_current &&
    lhs.Lane_current == rhs.Lane_current &&
    lhs.Seg_next == rhs.Seg_next &&
    lhs.Lane_next == rhs.Lane_next &&
    lhs.requestTrafficLight == rhs.requestTrafficLight;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::SegLane_<ContainerAllocator1> & lhs, const ::mcity_msg::SegLane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::SegLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::SegLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::SegLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::SegLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::SegLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::SegLane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::SegLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "920bea376243694a95f4ccd9ca4c2f36";
  }

  static const char* value(const ::mcity_msg::SegLane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x920bea376243694aULL;
  static const uint64_t static_value2 = 0x95f4ccd9ca4c2f36ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::SegLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/SegLane";
  }

  static const char* value(const ::mcity_msg::SegLane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::SegLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int16 Seg_previous\n"
"int16 Lane_previous\n"
"int16 Seg_current\n"
"int16 Lane_current\n"
"int16 Seg_next\n"
"int16 Lane_next\n"
"int16 requestTrafficLight\n"
;
  }

  static const char* value(const ::mcity_msg::SegLane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::SegLane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Seg_previous);
      stream.next(m.Lane_previous);
      stream.next(m.Seg_current);
      stream.next(m.Lane_current);
      stream.next(m.Seg_next);
      stream.next(m.Lane_next);
      stream.next(m.requestTrafficLight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SegLane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::SegLane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::SegLane_<ContainerAllocator>& v)
  {
    s << indent << "Seg_previous: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Seg_previous);
    s << indent << "Lane_previous: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Lane_previous);
    s << indent << "Seg_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Seg_current);
    s << indent << "Lane_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Lane_current);
    s << indent << "Seg_next: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Seg_next);
    s << indent << "Lane_next: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Lane_next);
    s << indent << "requestTrafficLight: ";
    Printer<int16_t>::stream(s, indent + "  ", v.requestTrafficLight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_SEGLANE_H
