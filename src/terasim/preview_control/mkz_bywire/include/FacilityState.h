// Generated by gencpp from file mcity_msg/FacilityState.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_FACILITYSTATE_H
#define MCITY_MSG_MESSAGE_FACILITYSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcity_msg
{
template <class ContainerAllocator>
struct FacilityState_
{
  typedef FacilityState_<ContainerAllocator> Type;

  FacilityState_()
    : timestamp(0.0)
    , rail_cross_gate_enable_go(0)
    , mcity_gate_enable_go(0)
    , car_door_open(0)
    , car_lon(0.0)
    , car_lat(0.0)
    , car_heading(0.0)
    , car_speed(0.0)
    , car_size_x(0.0)
    , car_size_y(0.0)
    , car_size_z(0.0)
    , dummy_moving(0)
    , dummy_lon(0.0)
    , dummy_lat(0.0)
    , dummy_heading(0.0)
    , dummy_speed(0.0)
    , dummy_size_x(0.0)
    , dummy_size_y(0.0)
    , dummy_size_z(0.0)  {
    }
  FacilityState_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , rail_cross_gate_enable_go(0)
    , mcity_gate_enable_go(0)
    , car_door_open(0)
    , car_lon(0.0)
    , car_lat(0.0)
    , car_heading(0.0)
    , car_speed(0.0)
    , car_size_x(0.0)
    , car_size_y(0.0)
    , car_size_z(0.0)
    , dummy_moving(0)
    , dummy_lon(0.0)
    , dummy_lat(0.0)
    , dummy_heading(0.0)
    , dummy_speed(0.0)
    , dummy_size_x(0.0)
    , dummy_size_y(0.0)
    , dummy_size_z(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int16_t _rail_cross_gate_enable_go_type;
  _rail_cross_gate_enable_go_type rail_cross_gate_enable_go;

   typedef int16_t _mcity_gate_enable_go_type;
  _mcity_gate_enable_go_type mcity_gate_enable_go;

   typedef int16_t _car_door_open_type;
  _car_door_open_type car_door_open;

   typedef double _car_lon_type;
  _car_lon_type car_lon;

   typedef double _car_lat_type;
  _car_lat_type car_lat;

   typedef double _car_heading_type;
  _car_heading_type car_heading;

   typedef double _car_speed_type;
  _car_speed_type car_speed;

   typedef double _car_size_x_type;
  _car_size_x_type car_size_x;

   typedef double _car_size_y_type;
  _car_size_y_type car_size_y;

   typedef double _car_size_z_type;
  _car_size_z_type car_size_z;

   typedef int16_t _dummy_moving_type;
  _dummy_moving_type dummy_moving;

   typedef double _dummy_lon_type;
  _dummy_lon_type dummy_lon;

   typedef double _dummy_lat_type;
  _dummy_lat_type dummy_lat;

   typedef double _dummy_heading_type;
  _dummy_heading_type dummy_heading;

   typedef double _dummy_speed_type;
  _dummy_speed_type dummy_speed;

   typedef double _dummy_size_x_type;
  _dummy_size_x_type dummy_size_x;

   typedef double _dummy_size_y_type;
  _dummy_size_y_type dummy_size_y;

   typedef double _dummy_size_z_type;
  _dummy_size_z_type dummy_size_z;





  typedef boost::shared_ptr< ::mcity_msg::FacilityState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::FacilityState_<ContainerAllocator> const> ConstPtr;

}; // struct FacilityState_

typedef ::mcity_msg::FacilityState_<std::allocator<void> > FacilityState;

typedef boost::shared_ptr< ::mcity_msg::FacilityState > FacilityStatePtr;
typedef boost::shared_ptr< ::mcity_msg::FacilityState const> FacilityStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::FacilityState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::FacilityState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::FacilityState_<ContainerAllocator1> & lhs, const ::mcity_msg::FacilityState_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.rail_cross_gate_enable_go == rhs.rail_cross_gate_enable_go &&
    lhs.mcity_gate_enable_go == rhs.mcity_gate_enable_go &&
    lhs.car_door_open == rhs.car_door_open &&
    lhs.car_lon == rhs.car_lon &&
    lhs.car_lat == rhs.car_lat &&
    lhs.car_heading == rhs.car_heading &&
    lhs.car_speed == rhs.car_speed &&
    lhs.car_size_x == rhs.car_size_x &&
    lhs.car_size_y == rhs.car_size_y &&
    lhs.car_size_z == rhs.car_size_z &&
    lhs.dummy_moving == rhs.dummy_moving &&
    lhs.dummy_lon == rhs.dummy_lon &&
    lhs.dummy_lat == rhs.dummy_lat &&
    lhs.dummy_heading == rhs.dummy_heading &&
    lhs.dummy_speed == rhs.dummy_speed &&
    lhs.dummy_size_x == rhs.dummy_size_x &&
    lhs.dummy_size_y == rhs.dummy_size_y &&
    lhs.dummy_size_z == rhs.dummy_size_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::FacilityState_<ContainerAllocator1> & lhs, const ::mcity_msg::FacilityState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::FacilityState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::FacilityState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::FacilityState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::FacilityState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::FacilityState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::FacilityState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::FacilityState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ba8beaaa81d84ae3cb097a905dd47e9";
  }

  static const char* value(const ::mcity_msg::FacilityState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ba8beaaa81d84aeULL;
  static const uint64_t static_value2 = 0x3cb097a905dd47e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::FacilityState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/FacilityState";
  }

  static const char* value(const ::mcity_msg::FacilityState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::FacilityState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 	timestamp\n"
"int16 		rail_cross_gate_enable_go\n"
"int16 		mcity_gate_enable_go\n"
"\n"
"#car-door-openning\n"
"int16 		car_door_open\n"
"float64 	car_lon\n"
"float64 	car_lat\n"
"float64 	car_heading\n"
"float64 	car_speed\n"
"float64 	car_size_x\n"
"float64 	car_size_y\n"
"float64 	car_size_z\n"
"\n"
"\n"
"#dummy\n"
"int16 		dummy_moving\n"
"float64 	dummy_lon\n"
"float64 	dummy_lat\n"
"float64 	dummy_heading\n"
"float64 	dummy_speed\n"
"float64 	dummy_size_x\n"
"float64 	dummy_size_y\n"
"float64 	dummy_size_z\n"
;
  }

  static const char* value(const ::mcity_msg::FacilityState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::FacilityState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.rail_cross_gate_enable_go);
      stream.next(m.mcity_gate_enable_go);
      stream.next(m.car_door_open);
      stream.next(m.car_lon);
      stream.next(m.car_lat);
      stream.next(m.car_heading);
      stream.next(m.car_speed);
      stream.next(m.car_size_x);
      stream.next(m.car_size_y);
      stream.next(m.car_size_z);
      stream.next(m.dummy_moving);
      stream.next(m.dummy_lon);
      stream.next(m.dummy_lat);
      stream.next(m.dummy_heading);
      stream.next(m.dummy_speed);
      stream.next(m.dummy_size_x);
      stream.next(m.dummy_size_y);
      stream.next(m.dummy_size_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FacilityState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::FacilityState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::FacilityState_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "rail_cross_gate_enable_go: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rail_cross_gate_enable_go);
    s << indent << "mcity_gate_enable_go: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mcity_gate_enable_go);
    s << indent << "car_door_open: ";
    Printer<int16_t>::stream(s, indent + "  ", v.car_door_open);
    s << indent << "car_lon: ";
    Printer<double>::stream(s, indent + "  ", v.car_lon);
    s << indent << "car_lat: ";
    Printer<double>::stream(s, indent + "  ", v.car_lat);
    s << indent << "car_heading: ";
    Printer<double>::stream(s, indent + "  ", v.car_heading);
    s << indent << "car_speed: ";
    Printer<double>::stream(s, indent + "  ", v.car_speed);
    s << indent << "car_size_x: ";
    Printer<double>::stream(s, indent + "  ", v.car_size_x);
    s << indent << "car_size_y: ";
    Printer<double>::stream(s, indent + "  ", v.car_size_y);
    s << indent << "car_size_z: ";
    Printer<double>::stream(s, indent + "  ", v.car_size_z);
    s << indent << "dummy_moving: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dummy_moving);
    s << indent << "dummy_lon: ";
    Printer<double>::stream(s, indent + "  ", v.dummy_lon);
    s << indent << "dummy_lat: ";
    Printer<double>::stream(s, indent + "  ", v.dummy_lat);
    s << indent << "dummy_heading: ";
    Printer<double>::stream(s, indent + "  ", v.dummy_heading);
    s << indent << "dummy_speed: ";
    Printer<double>::stream(s, indent + "  ", v.dummy_speed);
    s << indent << "dummy_size_x: ";
    Printer<double>::stream(s, indent + "  ", v.dummy_size_x);
    s << indent << "dummy_size_y: ";
    Printer<double>::stream(s, indent + "  ", v.dummy_size_y);
    s << indent << "dummy_size_z: ";
    Printer<double>::stream(s, indent + "  ", v.dummy_size_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_FACILITYSTATE_H
