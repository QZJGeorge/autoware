// Generated by gencpp from file mcity_msg/LocPoint.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_LOCPOINT_H
#define MCITY_MSG_MESSAGE_LOCPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcity_msg
{
template <class ContainerAllocator>
struct LocPoint_
{
  typedef LocPoint_<ContainerAllocator> Type;

  LocPoint_()
    : N(0)
    , seg_id(0)
    , lane_id(0)
    , longitude(0.0)
    , latitude(0.0)
    , heading(0.0)
    , cr(0.0)
    , dist_to_center(0.0)
    , heading_to_center(0.0)
    , lane_width(0.0)  {
    }
  LocPoint_(const ContainerAllocator& _alloc)
    : N(0)
    , seg_id(0)
    , lane_id(0)
    , longitude(0.0)
    , latitude(0.0)
    , heading(0.0)
    , cr(0.0)
    , dist_to_center(0.0)
    , heading_to_center(0.0)
    , lane_width(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _N_type;
  _N_type N;

   typedef int16_t _seg_id_type;
  _seg_id_type seg_id;

   typedef int16_t _lane_id_type;
  _lane_id_type lane_id;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _cr_type;
  _cr_type cr;

   typedef double _dist_to_center_type;
  _dist_to_center_type dist_to_center;

   typedef double _heading_to_center_type;
  _heading_to_center_type heading_to_center;

   typedef double _lane_width_type;
  _lane_width_type lane_width;





  typedef boost::shared_ptr< ::mcity_msg::LocPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::LocPoint_<ContainerAllocator> const> ConstPtr;

}; // struct LocPoint_

typedef ::mcity_msg::LocPoint_<std::allocator<void> > LocPoint;

typedef boost::shared_ptr< ::mcity_msg::LocPoint > LocPointPtr;
typedef boost::shared_ptr< ::mcity_msg::LocPoint const> LocPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::LocPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::LocPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::LocPoint_<ContainerAllocator1> & lhs, const ::mcity_msg::LocPoint_<ContainerAllocator2> & rhs)
{
  return lhs.N == rhs.N &&
    lhs.seg_id == rhs.seg_id &&
    lhs.lane_id == rhs.lane_id &&
    lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude &&
    lhs.heading == rhs.heading &&
    lhs.cr == rhs.cr &&
    lhs.dist_to_center == rhs.dist_to_center &&
    lhs.heading_to_center == rhs.heading_to_center &&
    lhs.lane_width == rhs.lane_width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::LocPoint_<ContainerAllocator1> & lhs, const ::mcity_msg::LocPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::LocPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::LocPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::LocPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::LocPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::LocPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::LocPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::LocPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50de1c9f6007b8ca7fd67b73e17b4fe3";
  }

  static const char* value(const ::mcity_msg::LocPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50de1c9f6007b8caULL;
  static const uint64_t static_value2 = 0x7fd67b73e17b4fe3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::LocPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/LocPoint";
  }

  static const char* value(const ::mcity_msg::LocPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::LocPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int64 	N\n"
"int16   seg_id\n"
"int16   lane_id\n"
"float64 longitude\n"
"float64 latitude\n"
"float64 heading\n"
"float64 cr\n"
"float64 dist_to_center\n"
"float64 heading_to_center\n"
"float64 lane_width\n"
;
  }

  static const char* value(const ::mcity_msg::LocPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::LocPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.N);
      stream.next(m.seg_id);
      stream.next(m.lane_id);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.heading);
      stream.next(m.cr);
      stream.next(m.dist_to_center);
      stream.next(m.heading_to_center);
      stream.next(m.lane_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::LocPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::LocPoint_<ContainerAllocator>& v)
  {
    s << indent << "N: ";
    Printer<int64_t>::stream(s, indent + "  ", v.N);
    s << indent << "seg_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.seg_id);
    s << indent << "lane_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "cr: ";
    Printer<double>::stream(s, indent + "  ", v.cr);
    s << indent << "dist_to_center: ";
    Printer<double>::stream(s, indent + "  ", v.dist_to_center);
    s << indent << "heading_to_center: ";
    Printer<double>::stream(s, indent + "  ", v.heading_to_center);
    s << indent << "lane_width: ";
    Printer<double>::stream(s, indent + "  ", v.lane_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_LOCPOINT_H
