// Generated by gencpp from file mcity_msg/SafeGuardResults.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_SAFEGUARDRESULTS_H
#define MCITY_MSG_MESSAGE_SAFEGUARDRESULTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mcity_msg
{
template <class ContainerAllocator>
struct SafeGuardResults_
{
  typedef SafeGuardResults_<ContainerAllocator> Type;

  SafeGuardResults_()
    : timestamp(0.0)
    , count(0)
    , enable_brake(false)
    , enable_steering(false)
    , mode(0)
    , level(0)
    , brake_value(0.0)
    , steering(0.0)  {
    }
  SafeGuardResults_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , count(0)
    , enable_brake(false)
    , enable_steering(false)
    , mode(0)
    , level(0)
    , brake_value(0.0)
    , steering(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _count_type;
  _count_type count;

   typedef uint8_t _enable_brake_type;
  _enable_brake_type enable_brake;

   typedef uint8_t _enable_steering_type;
  _enable_steering_type enable_steering;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef int32_t _level_type;
  _level_type level;

   typedef double _brake_value_type;
  _brake_value_type brake_value;

   typedef double _steering_type;
  _steering_type steering;





  typedef boost::shared_ptr< ::mcity_msg::SafeGuardResults_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::SafeGuardResults_<ContainerAllocator> const> ConstPtr;

}; // struct SafeGuardResults_

typedef ::mcity_msg::SafeGuardResults_<std::allocator<void> > SafeGuardResults;

typedef boost::shared_ptr< ::mcity_msg::SafeGuardResults > SafeGuardResultsPtr;
typedef boost::shared_ptr< ::mcity_msg::SafeGuardResults const> SafeGuardResultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::SafeGuardResults_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::SafeGuardResults_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::SafeGuardResults_<ContainerAllocator1> & lhs, const ::mcity_msg::SafeGuardResults_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.count == rhs.count &&
    lhs.enable_brake == rhs.enable_brake &&
    lhs.enable_steering == rhs.enable_steering &&
    lhs.mode == rhs.mode &&
    lhs.level == rhs.level &&
    lhs.brake_value == rhs.brake_value &&
    lhs.steering == rhs.steering;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::SafeGuardResults_<ContainerAllocator1> & lhs, const ::mcity_msg::SafeGuardResults_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::SafeGuardResults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::SafeGuardResults_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::SafeGuardResults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::SafeGuardResults_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::SafeGuardResults_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::SafeGuardResults_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::SafeGuardResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ed8d0d7a5b7fae97d24683dc9b2fbc6";
  }

  static const char* value(const ::mcity_msg::SafeGuardResults_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ed8d0d7a5b7fae9ULL;
  static const uint64_t static_value2 = 0x7d24683dc9b2fbc6ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::SafeGuardResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/SafeGuardResults";
  }

  static const char* value(const ::mcity_msg::SafeGuardResults_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::SafeGuardResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 timestamp\n"
"int32 	count\n"
"bool 	enable_brake\n"
"bool 	enable_steering\n"
"int32 	mode\n"
"int32 	level\n"
"float64 brake_value\n"
"float64 steering\n"
;
  }

  static const char* value(const ::mcity_msg::SafeGuardResults_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::SafeGuardResults_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.count);
      stream.next(m.enable_brake);
      stream.next(m.enable_steering);
      stream.next(m.mode);
      stream.next(m.level);
      stream.next(m.brake_value);
      stream.next(m.steering);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafeGuardResults_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::SafeGuardResults_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::SafeGuardResults_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
    s << indent << "enable_brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_brake);
    s << indent << "enable_steering: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_steering);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.level);
    s << indent << "brake_value: ";
    Printer<double>::stream(s, indent + "  ", v.brake_value);
    s << indent << "steering: ";
    Printer<double>::stream(s, indent + "  ", v.steering);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_SAFEGUARDRESULTS_H
