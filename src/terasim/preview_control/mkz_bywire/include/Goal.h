// Generated by gencpp from file mcity_msg/Goal.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_GOAL_H
#define MCITY_MSG_MESSAGE_GOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mcity_msg/Obstacle.h>
#include <mcity_msg/RefPath.h>

namespace mcity_msg
{
template <class ContainerAllocator>
struct Goal_
{
  typedef Goal_<ContainerAllocator> Type;

  Goal_()
    : timestamp(0.0)
    , Estop(0)
    , Go(false)
    , Signal(0)
    , x(0.0)
    , y(0.0)
    , heading(0.0)
    , speed_x(0.0)
    , acc_x(0.0)
    , yaw_rate(0.0)
    , ego_lane_width(0.0)
    , ego_lane_type(0)
    , tf(0.0)
    , yf(0.0)
    , xf(0.0)
    , xf_d(0.0)
    , xf_dd(0.0)
    , tf_min(0.0)
    , yf_min(0.0)
    , xf_min(0.0)
    , tf_max(0.0)
    , yf_max(0.0)
    , xf_max(0.0)
    , vd_yield(0.0)
    , ad_yield(0.0)
    , obstacleVec()
    , NPN(0)
    , refPathVec()  {
    }
  Goal_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , Estop(0)
    , Go(false)
    , Signal(0)
    , x(0.0)
    , y(0.0)
    , heading(0.0)
    , speed_x(0.0)
    , acc_x(0.0)
    , yaw_rate(0.0)
    , ego_lane_width(0.0)
    , ego_lane_type(0)
    , tf(0.0)
    , yf(0.0)
    , xf(0.0)
    , xf_d(0.0)
    , xf_dd(0.0)
    , tf_min(0.0)
    , yf_min(0.0)
    , xf_min(0.0)
    , tf_max(0.0)
    , yf_max(0.0)
    , xf_max(0.0)
    , vd_yield(0.0)
    , ad_yield(0.0)
    , obstacleVec(_alloc)
    , NPN(0)
    , refPathVec(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int16_t _Estop_type;
  _Estop_type Estop;

   typedef uint8_t _Go_type;
  _Go_type Go;

   typedef int16_t _Signal_type;
  _Signal_type Signal;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _speed_x_type;
  _speed_x_type speed_x;

   typedef double _acc_x_type;
  _acc_x_type acc_x;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef double _ego_lane_width_type;
  _ego_lane_width_type ego_lane_width;

   typedef int16_t _ego_lane_type_type;
  _ego_lane_type_type ego_lane_type;

   typedef double _tf_type;
  _tf_type tf;

   typedef double _yf_type;
  _yf_type yf;

   typedef double _xf_type;
  _xf_type xf;

   typedef double _xf_d_type;
  _xf_d_type xf_d;

   typedef double _xf_dd_type;
  _xf_dd_type xf_dd;

   typedef double _tf_min_type;
  _tf_min_type tf_min;

   typedef double _yf_min_type;
  _yf_min_type yf_min;

   typedef double _xf_min_type;
  _xf_min_type xf_min;

   typedef double _tf_max_type;
  _tf_max_type tf_max;

   typedef double _yf_max_type;
  _yf_max_type yf_max;

   typedef double _xf_max_type;
  _xf_max_type xf_max;

   typedef double _vd_yield_type;
  _vd_yield_type vd_yield;

   typedef double _ad_yield_type;
  _ad_yield_type ad_yield;

   typedef std::vector< ::mcity_msg::Obstacle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mcity_msg::Obstacle_<ContainerAllocator> >::other >  _obstacleVec_type;
  _obstacleVec_type obstacleVec;

   typedef int32_t _NPN_type;
  _NPN_type NPN;

   typedef std::vector< ::mcity_msg::RefPath_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mcity_msg::RefPath_<ContainerAllocator> >::other >  _refPathVec_type;
  _refPathVec_type refPathVec;





  typedef boost::shared_ptr< ::mcity_msg::Goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::Goal_<ContainerAllocator> const> ConstPtr;

}; // struct Goal_

typedef ::mcity_msg::Goal_<std::allocator<void> > Goal;

typedef boost::shared_ptr< ::mcity_msg::Goal > GoalPtr;
typedef boost::shared_ptr< ::mcity_msg::Goal const> GoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::Goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::Goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::Goal_<ContainerAllocator1> & lhs, const ::mcity_msg::Goal_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.Estop == rhs.Estop &&
    lhs.Go == rhs.Go &&
    lhs.Signal == rhs.Signal &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.heading == rhs.heading &&
    lhs.speed_x == rhs.speed_x &&
    lhs.acc_x == rhs.acc_x &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.ego_lane_width == rhs.ego_lane_width &&
    lhs.ego_lane_type == rhs.ego_lane_type &&
    lhs.tf == rhs.tf &&
    lhs.yf == rhs.yf &&
    lhs.xf == rhs.xf &&
    lhs.xf_d == rhs.xf_d &&
    lhs.xf_dd == rhs.xf_dd &&
    lhs.tf_min == rhs.tf_min &&
    lhs.yf_min == rhs.yf_min &&
    lhs.xf_min == rhs.xf_min &&
    lhs.tf_max == rhs.tf_max &&
    lhs.yf_max == rhs.yf_max &&
    lhs.xf_max == rhs.xf_max &&
    lhs.vd_yield == rhs.vd_yield &&
    lhs.ad_yield == rhs.ad_yield &&
    lhs.obstacleVec == rhs.obstacleVec &&
    lhs.NPN == rhs.NPN &&
    lhs.refPathVec == rhs.refPathVec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::Goal_<ContainerAllocator1> & lhs, const ::mcity_msg::Goal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::Goal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::Goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e5e6c24c8fcf5b0b1caea52d9e53f72";
  }

  static const char* value(const ::mcity_msg::Goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e5e6c24c8fcf5b0ULL;
  static const uint64_t static_value2 = 0xb1caea52d9e53f72ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/Goal";
  }

  static const char* value(const ::mcity_msg::Goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 	timestamp\n"
"\n"
"#five parts\n"
"int16 	Estop\n"
"bool 	Go\n"
"int16 	Signal\n"
"\n"
"\n"
"#part 1 -- vehicle state\n"
"float64 x\n"
"float64 y\n"
"float64 heading\n"
"float64 speed_x\n"
"float64 acc_x\n"
"float64 yaw_rate\n"
"float64 ego_lane_width\n"
"int16 ego_lane_type\n"
"\n"
"\n"
"#part 2 -- targets\n"
"float64 tf\n"
"float64 yf\n"
"float64 xf\n"
"float64 xf_d\n"
"float64 xf_dd\n"
"\n"
"float64 tf_min\n"
"float64 yf_min\n"
"float64 xf_min\n"
"\n"
"float64 tf_max\n"
"float64 yf_max\n"
"float64 xf_max\n"
"\n"
"float64 vd_yield\n"
"float64 ad_yield\n"
"\n"
"\n"
"#part 2 -- obstacles\n"
"Obstacle[] obstacleVec\n"
"\n"
"\n"
"#part 3 -- lane center and drivable area\n"
"int32 NPN\n"
"RefPath[] refPathVec\n"
"================================================================================\n"
"MSG: mcity_msg/Obstacle\n"
"float64 	timestamp\n"
"int32 		id \n"
"int16 		type\n"
"float64 	size_x\n"
"float64 	size_y\n"
"float64 	size_z\n"
"\n"
"float64 	x_global\n"
"float64 	y_global\n"
"float64 	h_global\n"
"\n"
"float64 	x_local\n"
"float64 	y_local\n"
"\n"
"#future path\n"
"OnePath[] pathVec\n"
"================================================================================\n"
"MSG: mcity_msg/OnePath\n"
"Point[] data\n"
"================================================================================\n"
"MSG: mcity_msg/Point\n"
"float64 t\n"
"float64 x\n"
"float64 y\n"
"float64 v\n"
"float64 heading\n"
"float64 cr\n"
"================================================================================\n"
"MSG: mcity_msg/RefPath\n"
"\n"
"#reference path\n"
"float64 	x\n"
"float64 	y\n"
"float64 	heading\n"
"float64 	cr\n"
"float64 	distance\n"
"\n"
"#drivable area\n"
"float64 	left_width\n"
"float64 	right_width\n"
;
  }

  static const char* value(const ::mcity_msg::Goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::Goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.Estop);
      stream.next(m.Go);
      stream.next(m.Signal);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.heading);
      stream.next(m.speed_x);
      stream.next(m.acc_x);
      stream.next(m.yaw_rate);
      stream.next(m.ego_lane_width);
      stream.next(m.ego_lane_type);
      stream.next(m.tf);
      stream.next(m.yf);
      stream.next(m.xf);
      stream.next(m.xf_d);
      stream.next(m.xf_dd);
      stream.next(m.tf_min);
      stream.next(m.yf_min);
      stream.next(m.xf_min);
      stream.next(m.tf_max);
      stream.next(m.yf_max);
      stream.next(m.xf_max);
      stream.next(m.vd_yield);
      stream.next(m.ad_yield);
      stream.next(m.obstacleVec);
      stream.next(m.NPN);
      stream.next(m.refPathVec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::Goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::Goal_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "Estop: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Estop);
    s << indent << "Go: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Go);
    s << indent << "Signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Signal);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "speed_x: ";
    Printer<double>::stream(s, indent + "  ", v.speed_x);
    s << indent << "acc_x: ";
    Printer<double>::stream(s, indent + "  ", v.acc_x);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "ego_lane_width: ";
    Printer<double>::stream(s, indent + "  ", v.ego_lane_width);
    s << indent << "ego_lane_type: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ego_lane_type);
    s << indent << "tf: ";
    Printer<double>::stream(s, indent + "  ", v.tf);
    s << indent << "yf: ";
    Printer<double>::stream(s, indent + "  ", v.yf);
    s << indent << "xf: ";
    Printer<double>::stream(s, indent + "  ", v.xf);
    s << indent << "xf_d: ";
    Printer<double>::stream(s, indent + "  ", v.xf_d);
    s << indent << "xf_dd: ";
    Printer<double>::stream(s, indent + "  ", v.xf_dd);
    s << indent << "tf_min: ";
    Printer<double>::stream(s, indent + "  ", v.tf_min);
    s << indent << "yf_min: ";
    Printer<double>::stream(s, indent + "  ", v.yf_min);
    s << indent << "xf_min: ";
    Printer<double>::stream(s, indent + "  ", v.xf_min);
    s << indent << "tf_max: ";
    Printer<double>::stream(s, indent + "  ", v.tf_max);
    s << indent << "yf_max: ";
    Printer<double>::stream(s, indent + "  ", v.yf_max);
    s << indent << "xf_max: ";
    Printer<double>::stream(s, indent + "  ", v.xf_max);
    s << indent << "vd_yield: ";
    Printer<double>::stream(s, indent + "  ", v.vd_yield);
    s << indent << "ad_yield: ";
    Printer<double>::stream(s, indent + "  ", v.ad_yield);
    s << indent << "obstacleVec[]" << std::endl;
    for (size_t i = 0; i < v.obstacleVec.size(); ++i)
    {
      s << indent << "  obstacleVec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mcity_msg::Obstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacleVec[i]);
    }
    s << indent << "NPN: ";
    Printer<int32_t>::stream(s, indent + "  ", v.NPN);
    s << indent << "refPathVec[]" << std::endl;
    for (size_t i = 0; i < v.refPathVec.size(); ++i)
    {
      s << indent << "  refPathVec[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mcity_msg::RefPath_<ContainerAllocator> >::stream(s, indent + "    ", v.refPathVec[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_GOAL_H
