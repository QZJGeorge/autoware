// Generated by gencpp from file mcity_msg/LocVec.msg
// DO NOT EDIT!


#ifndef MCITY_MSG_MESSAGE_LOCVEC_H
#define MCITY_MSG_MESSAGE_LOCVEC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mcity_msg/LocPoint.h>

namespace mcity_msg
{
template <class ContainerAllocator>
struct LocVec_
{
  typedef LocVec_<ContainerAllocator> Type;

  LocVec_()
    : timestamp(0.0)
    , NPN(0)
    , data()  {
    }
  LocVec_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , NPN(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int64_t _NPN_type;
  _NPN_type NPN;

   typedef std::vector< ::mcity_msg::LocPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mcity_msg::LocPoint_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::mcity_msg::LocVec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mcity_msg::LocVec_<ContainerAllocator> const> ConstPtr;

}; // struct LocVec_

typedef ::mcity_msg::LocVec_<std::allocator<void> > LocVec;

typedef boost::shared_ptr< ::mcity_msg::LocVec > LocVecPtr;
typedef boost::shared_ptr< ::mcity_msg::LocVec const> LocVecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mcity_msg::LocVec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mcity_msg::LocVec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mcity_msg::LocVec_<ContainerAllocator1> & lhs, const ::mcity_msg::LocVec_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.NPN == rhs.NPN &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mcity_msg::LocVec_<ContainerAllocator1> & lhs, const ::mcity_msg::LocVec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mcity_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::LocVec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mcity_msg::LocVec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::LocVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mcity_msg::LocVec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::LocVec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mcity_msg::LocVec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mcity_msg::LocVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56225a75aa2852a4568356653d45abd2";
  }

  static const char* value(const ::mcity_msg::LocVec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56225a75aa2852a4ULL;
  static const uint64_t static_value2 = 0x568356653d45abd2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mcity_msg::LocVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mcity_msg/LocVec";
  }

  static const char* value(const ::mcity_msg::LocVec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mcity_msg::LocVec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 timestamp\n"
"int64 	NPN\n"
"LocPoint[]  data\n"
"\n"
" \n"
"\n"
"================================================================================\n"
"MSG: mcity_msg/LocPoint\n"
"\n"
"int64 	N\n"
"int16   seg_id\n"
"int16   lane_id\n"
"float64 longitude\n"
"float64 latitude\n"
"float64 heading\n"
"float64 cr\n"
"float64 dist_to_center\n"
"float64 heading_to_center\n"
"float64 lane_width\n"
;
  }

  static const char* value(const ::mcity_msg::LocVec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mcity_msg::LocVec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.NPN);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocVec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mcity_msg::LocVec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mcity_msg::LocVec_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "NPN: ";
    Printer<int64_t>::stream(s, indent + "  ", v.NPN);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mcity_msg::LocPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MCITY_MSG_MESSAGE_LOCVEC_H
